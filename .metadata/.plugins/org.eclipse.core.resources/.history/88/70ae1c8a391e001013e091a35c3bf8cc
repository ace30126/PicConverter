package imgconv;

import net.sf.image4j.codec.ico.ICOEncoder;
import javax.imageio.ImageIO;
import javax.swing.*;
import javax.swing.border.TitledBorder;
import java.awt.*;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.Transferable;
import java.awt.dnd.DnDConstants;
import java.awt.dnd.DropTarget;
import java.awt.dnd.DropTargetAdapter;
import java.awt.dnd.DropTargetDropEvent;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class ImageConverter extends JFrame {

    private JRadioButton pngButton;
    private JRadioButton jpgButton;
    private JRadioButton icoButton;
    private JTextArea logTextArea;
    private JButton selectButton;
    private JButton infoButton;
    private File[] selectedFiles;
    private ExecutorService executorService = Executors.newFixedThreadPool(5); // 동시에 처리할 스레드 개수 설정

    public ImageConverter() {
        setTitle("이미지 변환기");
        setSize(400, 300);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);
        setResizable(false);

        // ... (기존 생성자 코드 - 아이콘, 배경, 버튼 그룹, 로그 영역, 버튼 액션 리스너 등) ...

        backgroundPanel.add(formatPanel, BorderLayout.NORTH);
        backgroundPanel.add(logScrollPane, BorderLayout.CENTER);
        backgroundPanel.add(buttonPanel, BorderLayout.SOUTH);

        add(backgroundPanel);
        setVisible(true);

        // 프로그램 종료 시 스레드 풀 정리
        addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosing(java.awt.event.WindowEvent windowEvent) {
                executorService.shutdownNow();
                System.exit(0);
            }
        });
    }

    private void convertImages() {
        if (selectedFiles == null || selectedFiles.length == 0) {
            logTextArea.append("선택된 파일이 없습니다.\n");
            return;
        }

        String targetFormat = null;
        if (pngButton.isSelected()) {
            targetFormat = "png";
        } else if (jpgButton.isSelected()) {
            targetFormat = "jpg";
        } else if (icoButton.isSelected()) {
            targetFormat = "ico";
        } else {
            logTextArea.append("변환할 확장자를 선택해주세요.\n");
            return;
        }

        String finalTargetFormat = targetFormat; // 스레드에서 사용하기 위해 final 변수로 만듦

        for (File file : selectedFiles) {
            String fileName = file.getName();
            String fileExtension = fileName.substring(fileName.lastIndexOf(".") + 1).toLowerCase();

            if (!fileExtension.equals("jpg") && !fileExtension.equals("jpeg") &&
                !fileExtension.equals("png") && !fileExtension.equals("h264") && !fileExtension.equals("ico")) {
                logTextArea.append(fileName + ": 변환 불가, jpg, png, H264, ico만 가능합니다.\n");
                continue;
            }

            File finalFile = file; // 스레드에서 사용하기 위해 final 변수로 만듦
            String processingMessage = finalFile.getName() + " [변환중]\n";
            SwingUtilities.invokeLater(() -> logTextArea.append(processingMessage)); // UI 업데이트는 EventQueue에서

            executorService.submit(() -> {
                try {
                    BufferedImage originalImage = ImageIO.read(finalFile);
                    if (originalImage == null && !fileExtension.equals("h264") && !fileExtension.equals("ico")) {
                        SwingUtilities.invokeLater(() -> logTextArea.append("파일을 이미지로 읽을 수 없습니다: " + finalFile.getName() + "\n"));
                        return;
                    }

                    String originalName = fileName.substring(0, fileName.lastIndexOf("."));
                    File outputFile = new File(finalFile.getParent(), originalName + "_conv." + finalTargetFormat);

                    if (finalTargetFormat.equals("ico")) {
                        List<BufferedImage> icoImages = new ArrayList<>();
                        if (originalImage != null) {
                            icoImages.add(originalImage);
                            try {
                                ICOEncoder.write(icoImages, outputFile);
                                SwingUtilities.invokeLater(() -> logTextArea.append(finalFile.getName() + " -> " + outputFile.getName() + " (ICO) 변환 완료\n"));
                            } catch (IOException e) {
                                SwingUtilities.invokeLater(() -> logTextArea.append(finalFile.getName() + " -> " + outputFile.getName() + " (ICO) 변환 실패: " + e.getMessage() + "\n"));
                            }
                        } else {
                            SwingUtilities.invokeLater(() -> logTextArea.append(finalFile.getName() + ": ICO 변환을 위한 이미지 데이터를 읽을 수 없습니다.\n"));
                        }
                    } else if (!fileExtension.equals("h264")) {
                        ImageIO.write(originalImage, finalTargetFormat, outputFile);
                        SwingUtilities.invokeLater(() -> logTextArea.append(finalFile.getName() + " -> " + outputFile.getName() + " 변환 완료\n"));
                    } else {
                        SwingUtilities.invokeLater(() -> logTextArea.append(finalFile.getName() + " -> " + outputFile.getName() + ": H264 파일은 이미지 변환을 지원하지 않습니다.\n"));
                    }

                } catch (IOException e) {
                    SwingUtilities.invokeLater(() -> logTextArea.append("이미지 변환 중 오류가 발생했습니다: " + finalFile.getName() + " - " + e.getMessage() + "\n"));
                } catch (IllegalArgumentException e) {
                    SwingUtilities.invokeLater(() -> logTextArea.append("지원하지 않는 이미지 형식입니다: " + finalFile.getName() + " - "e.getMessage() + "\n"));
                } finally {
                    SwingUtilities.invokeLater(() -> logTextArea.setCaretPosition(logTextArea.getDocument().getLength()));
                }
            });
        }
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(ImageConverter::new);
    }
}